diff -Nupr spice-gtk-0.30/configure.ac ../spice-gtk-0.30/configure.ac
--- spice-gtk-0.30/configure.ac	2015-11-12 16:12:25.994639003 +0800
+++ ../spice-gtk-0.30/configure.ac	2015-11-12 16:17:10.051995808 +0800
@@ -114,6 +114,18 @@ AC_SUBST(SSL_CFLAGS)
 AC_SUBST(SSL_LIBS)
 SPICE_GLIB_REQUIRES="${SPICE_GLIB_REQUIRES} openssl"
 
+PKG_CHECK_MODULES(LIBSWSCALE, libswscale >= 3.1.101)
+SPICE_GLIB_REQUIRES+=" libswscale >= 3.1.101"
+
+PKG_CHECK_MODULES(LIBAVCODEC, libavcodec >= 56.60.100)
+SPICE_GLIB_REQUIRES+=" libavcodec >= 56.60.100"
+
+PKG_CHECK_MODULES(LIBAVUTIL, libavutil >= 54.31.100)
+SPICE_GLIB_REQUIRES+=" libavutil >= 54.31.100"
+
+PKG_CHECK_MODULES(LIBAVFORMAT, libavformat >= 56.40.101)
+SPICE_GLIB_REQUIRES+=" libavformat >= 56.40.101"
+
 dnl Cyrus SASL
 AC_ARG_WITH([sasl],
   [AS_HELP_STRING([--with-sasl=@<:@yes/no/auto@:>@], [use cyrus SASL for authentication @<:@default=auto@:>@])],
diff -Nupr spice-gtk-0.30/spice-common/common/canvas_base.c ../spice-gtk-0.30/spice-common/common/canvas_base.c
--- spice-gtk-0.30/spice-common/common/canvas_base.c	2015-11-12 16:12:26.051638272 +0800
+++ ../spice-gtk-0.30/spice-common/common/canvas_base.c	2015-11-06 12:33:43.962121336 +0800
@@ -973,7 +973,13 @@ static void dump_bitmap(SpiceBitmap *bit
 
 #endif
 
-static pixman_image_t *canvas_get_bits(CanvasBase *canvas, SpiceBitmap *bitmap,
+/*
+ * ZZQ change the function from static to extern,
+ * so that display_handle_h264_stream_data can call it
+ *
+ * FIXME: tmp code
+ */
+pixman_image_t *canvas_get_bits(CanvasBase *canvas, SpiceBitmap *bitmap,
                                        int want_original)
 {
     pixman_image_t* surface;
@@ -998,7 +1004,13 @@ static pixman_image_t *canvas_get_bits(C
 #else
 
 
-static pixman_image_t *canvas_get_bits(CanvasBase *canvas, SpiceBitmap *bitmap,
+/*
+ * ZZQ change the function from static to extern,
+ * so that display_handle_h264_stream_data can call it
+ *
+ * FIXME: tmp code
+ */
+pixman_image_t *canvas_get_bits(CanvasBase *canvas, SpiceBitmap *bitmap,
                                        int want_original)
 {
     SpicePalette *palette;
diff -Nupr spice-gtk-0.30/spice-common/common/messages.h ../spice-gtk-0.30/spice-common/common/messages.h
--- spice-gtk-0.30/spice-common/common/messages.h	2015-11-12 16:12:26.037638452 +0800
+++ ../spice-gtk-0.30/spice-common/common/messages.h	2015-11-12 15:26:14.210152380 +0800
@@ -339,6 +339,17 @@ typedef struct SpiceMsgDisplayStreamData
     uint8_t data[0];
 } SpiceMsgDisplayStreamData;
 
+typedef struct SpiceH264StreamDataHeader {
+    uint32_t width;
+    uint32_t height;
+} SpiceH264StreamDataHeader;
+
+typedef struct SpiceMsgDisplayH264StreamData {
+    SpiceH264StreamDataHeader base;
+    uint32_t data_size;
+    uint8_t data[0];
+} SpiceMsgDisplayH264StreamData;
+
 typedef struct SpiceMsgDisplayStreamDataSized {
     SpiceStreamDataHeader base;
     uint32_t width;
diff -Nupr spice-gtk-0.30/spice-common/common/sw_canvas.c ../spice-gtk-0.30/spice-common/common/sw_canvas.c
--- spice-gtk-0.30/spice-common/common/sw_canvas.c	2015-11-12 16:12:26.057638195 +0800
+++ ../spice-gtk-0.30/spice-common/common/sw_canvas.c	2015-11-06 12:33:43.981121087 +0800
@@ -397,7 +397,13 @@ static void __blit_image(SpiceCanvas *sp
     }
 }
 
-static void blit_image(SpiceCanvas *spice_canvas,
+/*
+ * ZZQ change the function from static to extern,
+ * so that display_handle_h264_stream_data can call it
+ *
+ * FIXME: tmp code
+ */
+void blit_image(SpiceCanvas *spice_canvas,
                        pixman_region32_t *region,
                        pixman_image_t *src_image,
                        int offset_x, int offset_y)
diff -Nupr spice-gtk-0.30/src/channel-display.c ../spice-gtk-0.30/src/channel-display.c
--- spice-gtk-0.30/src/channel-display.c	2015-11-12 16:12:25.744642210 +0800
+++ ../spice-gtk-0.30/src/channel-display.c	2015-11-12 15:35:05.709360304 +0800
@@ -29,6 +29,12 @@
 #include <sys/ipc.h>
 #endif
 
+#include <libavcodec/avcodec.h>
+#include <libavutil/frame.h>
+#include <libavformat/avformat.h>
+#include <libswscale/swscale.h>
+#include <libavutil/imgutils.h>
+
 #include "glib-compat.h"
 #include "spice-client.h"
 #include "spice-common.h"
@@ -1337,6 +1343,317 @@ static void display_stream_test_frames_m
 
 #define STREAM_PLAYBACK_SYNC_DROP_SEQ_LEN_LIMIT 5
 
+static int yuv2rgb(const uint8_t *yuv, const int width, const int height, uint8_t *rgb)
+{
+    struct SwsContext *sws;
+    const uint8_t *yuv_slice[3];
+    int yuv_stride[3];
+    uint8_t *rgb_slice[3];
+    int rgb_stride[3];
+    int n;
+
+    sws = sws_getContext(width, height, PIX_FMT_YUV420P,
+                width, height, PIX_FMT_RGB32,
+                1, NULL, NULL, NULL);
+    if (sws == NULL) {
+        fprintf(stderr, "Failed to get swscale context\n");
+        return -1;
+    }
+
+    yuv_slice[0] = yuv;
+    yuv_slice[1] = yuv + width * height;
+    yuv_slice[2] = yuv_slice[1] + width * height / 4;
+    yuv_stride[0] = width;
+    yuv_stride[1] = width / 2;
+    yuv_stride[2] = width / 2;
+    rgb_slice[0] = rgb;
+    rgb_slice[1] = NULL;
+    rgb_slice[2] = NULL;
+    rgb_stride[0] = width * 4;
+    rgb_stride[1] = 0;
+    rgb_stride[2] = 0;
+
+    n = sws_scale(sws, yuv_slice, yuv_stride, 0, height,
+            rgb_slice, rgb_stride);
+    sws_freeContext(sws);
+    sws = NULL;
+
+    if (n != height){
+        fprintf(stderr, "Failed to run swscale\n");
+        return -1;
+    }
+
+    return 0;
+}
+
+static AVCodecContext *h264_decoder_init(const int width, const int height)
+{
+    AVCodec *codec;
+    AVCodecContext *ctx;
+    int result;
+
+    codec = NULL;
+    ctx = NULL;
+
+    av_register_all();
+
+    avcodec_register_all();
+
+    codec = avcodec_find_decoder(AV_CODEC_ID_H264);
+
+    ctx = avcodec_alloc_context3(codec);
+
+    ctx->width = width;
+    ctx->height = height;
+
+    result = avcodec_open2(ctx, codec, NULL);
+    if (result < 0) {
+        fprintf(stderr, "Can't open decoder\n");
+        goto fail;
+    }
+
+    return ctx;
+
+fail:
+    return NULL;
+}
+
+static void fill_bitmap(SpiceBitmap *bitmap, SpiceChunks *chunks,
+                const int width, const int height)
+{
+    bitmap->format = 8;
+    bitmap->flags = 4;
+    bitmap->x = width;
+    bitmap->y = height;
+    bitmap->stride = width * 4;
+    bitmap->palette = NULL;
+    bitmap->palette_id = 0;
+    bitmap->data = chunks;
+}
+
+static int h264_decode(uint8_t *data, const int data_size,
+                const int width, const int height, uint8_t *rgb)
+{
+    static AVCodecContext *ctx = NULL;
+    static AVFrame *fr = NULL;
+    static AVPacket pkt;
+    static int last_width = 0;
+    static int last_height = 0;
+
+    int result;
+    int got_frame;
+    uint8_t *yuv;
+    int yuv_size;
+    int n;
+
+    yuv = NULL;
+
+    if (width != last_width || height != last_height) {
+        fprintf(stderr, "[ZZQ] decode init\n");
+        if (ctx != NULL) {
+            avcodec_free_context(&ctx);
+            ctx = NULL;
+        }
+        av_free_packet(&pkt);
+        av_frame_free(&fr);
+        ctx = h264_decoder_init(width, height);
+        if (ctx == NULL) {
+            fprintf(stderr, "Failed to init decoder\n");
+            goto fail;
+        }
+        fr = av_frame_alloc();
+        if (fr == NULL) {
+            fprintf(stderr, "Failed to allocate frame\n");
+            goto fail;
+        }
+        av_init_packet(&pkt);
+        last_width = width;
+        last_height = height;
+    }
+
+    yuv_size = 3 * width * height / 2;
+    yuv = malloc(yuv_size);
+    if (yuv == NULL) {
+        fprintf(stderr, "Failed to allocate buffer for yuv\n");
+        goto fail;
+    }
+
+    pkt.data = data;
+    pkt.size = data_size;
+
+   result = avcodec_decode_video2(ctx, fr, &got_frame, &pkt);
+   if (result < 0) {
+        fprintf(stderr, "Failed to decode frame\n");
+        goto fail;
+   }
+
+   if (got_frame) {
+        n = av_image_copy_to_buffer(yuv, yuv_size,
+                (const uint8_t* const *)fr->data, (const int*) fr->linesize,
+                ctx->pix_fmt, ctx->width, ctx->height, 1);
+        if (n < 0) {
+            fprintf(stderr, "Can't copy image to buffer\n");
+            goto fail;
+        }
+        //color space transfer
+        result = yuv2rgb(yuv, width, height, rgb);
+        if (result < 0) {
+            fprintf(stderr, "Failed to transfer yuv to rgb\n");
+            goto fail;
+        }
+    } else {
+        fprintf(stderr, "Got No frame\n");
+        goto fail;
+    }
+
+    free(yuv);
+    yuv = NULL;
+
+    return 0;
+
+fail:
+    if (yuv != NULL) {
+        free(yuv);
+        yuv= NULL;
+    }
+
+    return -1;
+}
+
+static int h264_display(uint8_t *rgb, SpiceChannel *channel,
+                int surface_id, const int width, const int height)
+{
+    SpiceRect box;
+    pixman_region32_t dest_region;
+    pixman_image_t *src_image;
+    SpiceBitmap bitmap;
+    SpiceChunks *chunks;
+    display_surface *surface;
+        
+
+    surface = find_surface(SPICE_DISPLAY_CHANNEL(channel)->priv, surface_id);
+    if (surface == NULL) {
+        fprintf(stderr, "Can not find surface\n");
+        return -1; 
+    }
+    
+    box.left = 0;
+    box.top = 0;
+    box.right = width;
+    box.bottom = height;
+
+    chunks = malloc(sizeof(SpiceChunks) + sizeof(SpiceChunk));
+
+    chunks->data_size = 4 * width * height;
+    chunks->num_chunks = 1;
+    chunks->flags = 0;
+    chunks->chunk[0].len = 4 * width * height;
+    chunks->chunk[0].data = rgb;
+
+    pixman_region32_init_rect(&dest_region,
+                          box.left, box.top,
+                          box.right - box.left,
+                          box.bottom - box.top);
+
+    fill_bitmap(&bitmap, chunks, width, height);
+
+    src_image = canvas_get_bits(surface->canvas, &bitmap, TRUE);
+
+    blit_image(surface->canvas, &dest_region, src_image, 0, 0);
+    if (surface->primary) {
+        emit_invalidate(channel, &box);
+    }
+    pixman_image_unref(src_image);
+    pixman_region32_fini(&dest_region);
+
+    free(chunks);
+    chunks = NULL;
+
+    return 0;
+}
+
+static void display_handle_h264_data(SpiceChannel *channel, SpiceMsgIn *in)
+{
+/*
+ *  At present, I just use SpiceMsgDisplayStreamData, I use its base.id as width
+ *  its base.multi_media_time as height
+ *  FIXME: add a new Msg in spice-common
+ */
+    SpiceMsgDisplayH264StreamData *stream_data_op;
+
+    /* data from Msg */
+    int width;
+    int height;
+    int surface_id;
+    uint8_t *data;
+    int data_size;
+    
+    uint8_t *rgb;
+
+    rgb = NULL;
+
+    stream_data_op = spice_msg_in_parsed(in);
+    
+    surface_id = 0; //FIXME
+    width = stream_data_op->base.width;
+    height = stream_data_op->base.height;
+    data = stream_data_op->data;
+    data_size = stream_data_op->data_size;
+
+/*
+ * this code is t test whether decode is right or not
+ * generate a rawh264 stream, use ffplay to test it
+ */
+#if 0
+    static FILE *est_fp;
+    static int cn = 0;
+    if (cnt == 0){
+        test_fp =fopen("/tmp/test.264", "wb");
+        spice_assrt(test_fp != NULL);
+        cnt++;
+    }
+    if (cnt < 50){
+        spice_assrt(fwrite(stream_data_op->data, stream_data_op->data_size, 1, test_fp) == 1);
+        cnt++;
+    }
+    else if (cnt = 50) {
+        (void)fclse(test_fp);
+        test_fp =NULL;
+        cnt++;
+    }
+    return;
+#endif
+
+#if 0
+    fprintf(stder, "[ZZQ] I have received, data_size = %d\n", stream_data_op->data_size);
+    fprintf(stder, "[ZZQ] width = %d, height = %d\n", width, height);
+#endif
+
+    rgb = malloc(4 * width *height);
+    if (rgb == NULL) {
+        fprintf(stderr, "Failed to allocate buffer for rgb\n");
+        goto fail;
+    }
+
+    if (h264_decode(data, data_size, width, height, rgb) == 0) {
+        if (h264_display(rgb, channel, surface_id, width, height) < 0) {
+            fprintf(stderr, "Failed to display\n");
+            goto fail;
+        }
+    } else {
+        fprintf(stderr, "Failed to decode a h264 frame\n");
+        goto fail;
+    }
+
+    free(rgb);
+    rgb = NULL;
+
+    return;
+
+fail:
+    spice_assert(FALSE);
+}
+
 /* coroutine context */
 static void display_handle_stream_data(SpiceChannel *channel, SpiceMsgIn *in)
 {
@@ -1767,6 +2084,7 @@ static void channel_set_handlers(SpiceCh
         [ SPICE_MSG_DISPLAY_INVAL_ALL_PALETTES ] = display_handle_inv_palette_all,
 
         [ SPICE_MSG_DISPLAY_STREAM_CREATE ]      = display_handle_stream_create,
+        [ SPICE_MSG_DISPLAY_H264_STREAM_DATA ]        = display_handle_h264_data,
         [ SPICE_MSG_DISPLAY_STREAM_DATA ]        = display_handle_stream_data,
         [ SPICE_MSG_DISPLAY_STREAM_CLIP ]        = display_handle_stream_clip,
         [ SPICE_MSG_DISPLAY_STREAM_DESTROY ]     = display_handle_stream_destroy,
diff -Nupr spice-gtk-0.30/src/Makefile.am ../spice-gtk-0.30/src/Makefile.am
--- spice-gtk-0.30/src/Makefile.am	2015-11-12 16:12:25.803641453 +0800
+++ ../spice-gtk-0.30/src/Makefile.am	2015-11-12 16:19:28.739217538 +0800
@@ -94,6 +94,10 @@ SPICE_COMMON_CPPFLAGS =						\
 	$(GLIB2_CFLAGS)						\
 	$(GIO_CFLAGS)						\
 	$(GOBJECT2_CFLAGS)					\
+	$(LIBAVCODEC_CFLAGS)					\
+	$(LIBAVFORMAT_CFLAGS)					\
+	$(LIBAVUTIL_CFLAGS)					\
+	$(LIBSWSCALE_CFLAGS)					\
 	$(SSL_CFLAGS)						\
 	$(SASL_CFLAGS)						\
 	$(GST_CFLAGS)						\
@@ -203,6 +207,10 @@ libspice_client_glib_2_0_la_LIBADD =
 	$(GOBJECT2_LIBS)						\
 	$(JPEG_LIBS)							\
 	$(Z_LIBS)							\
+	$(LIBAVCODEC_LIBS)						\
+	$(LIBAVFORMAT_LIBS)						\
+	$(LIBAVUTIL_LIBS)						\
+	$(LIBSWSCALE_LIBS)						\
 	$(LZ4_LIBS)							\
 	$(PIXMAN_LIBS)							\
 	$(SSL_LIBS)							\
